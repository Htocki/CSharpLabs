// Подключение классов стандартного модуля System.
using System;

// Определение класса А.
public class A
{
    // Определение конструктора по-умолчанию класса A, который
    public A()
    {
        a = 0;  // инициализирует нулем поле а
        b = 0;  // и инициализирует нулем поле b.
    }
    // Определение конструктора класса A, принимающего параметры
    // a и b типа float.
    public A(float a, float b)
    {
        this.a = a;  // Инициализация поля a значением параметра a.
        this.b = b;  // Инициализация поля b значением параметра b.
    }
    // Свойство c.
    public float c 
    {
        // Возвращает результат деления a на b
        // Выражение (операция деления) указана в задании
        // варианта лабораторной работы 1.
        get { return a / b; }
        // Отмимает получаемое значение value как от a, так
        // и от b. Выражение (операция отнимания) указана в
        // задании варианта лабораторной работы 1.
        set
        {
            a -= value;
            b -= value;
        }
    }
    // Объявление поля a. Поле объявлено с модификатором
    // protected, чтобы также быть доступным и классу B,
    // после наследования им класса A.
    protected float a;
    // Объявление поля b. Поле объявлено с модификатором
    // protected, чтобы также быть доступным и классу B,
    // после наследования им класса A.
    protected float b;
}

// Определение класса B, который является наследником
// класса A, что в свою очередь означает, что классу B
// будут доступны все поля, свойства и методы класса A
// имеющие модификаторы private и protected.
public class B : A
{
    // Определение конструктора класса B, который наследуется
    // от конструктора класса A (: base(a, b)).
    private B(float a, float b, bool d) : base(a, b)
    {
        this.d = d;  // Инизициализация поля d, значением из
                     // параметра d.
    }
    // Определение конструктора класса B, внутри которого
    // производится инициализация массива. Данный конструктор,
    // передает управление другому конструктору класса B
    // (: this((float)size, 2.5f, true)).
    public B(uint size) : this((float)size, 2.5f, true)
    {
        // Инициализация массива. Размерность массива равна
        // значению переменной size. Размерность массива также
        // равна полю а, так как поле а инициализируется
        // переменной size, при передаче управления другому
        // конструктору класса B.
        array = new float[size];
        // Цикл, инициализирующий элементы массива значением
        // возвращаемым свойстом с2 помноженным на значение
        // итератора i цикла (задание варианта).
        for (uint i = 0; i < array.Length; i++)
        {
            array[i] = c2 * i;
        }
    }
    // Поэлементно выводит значения массива в консоль.
    // Вывод производится циклом foreach, который производит
    // итерацию по элементам массива без обращения к элементам
    // массива через значение итератора и необходимости изменения
    // значения итератора вручную. Цикл foreach выполняет
    // перечисленные действия автоматически.
    public void PrintArray()
    {
        Console.Write("Array: ");
        foreach (float element in array)
        {
           Console.Write("{0} ", element);
        }
        Console.WriteLine("");
    }
    // Определение свойства c2
    public float c2
    {
        // которое возвращает результат выражения над полями a,
        // b и d.
        get {
            // В свойстве изпользуется управляющий оператор
            // (оператор условного ветвления if) определенный
            // заданием варианта лабораторной работы 2.
            if (d) { return a + b; }  // Если d равно true, то
                                      // возвращается сумма
                                      // полей a и b,
            else { return a - b; }  // иначе возвращается их
                                    // разность.
        }
    }
    // Определение поля d. Тип поля выбран произвольно. Поле по
    // умолчанию имеет модификатор private, сигнализирующий,
    // что оно доступно только внутри класса.
    bool d;
    // Определение массива под именем array, который содержит
    // элементы типа float. 
    float[] array;
} 

// Создание класса Program
class Program
{
    // с одним методом (точкой входа) Main.
    static void Main()
    {
        // Создание объекта b класса B, который задействует
        // конструктор, внутри которого происходит инициализация
        // массива.
        B b = new B(4);
        // Вывод значений, возвращаемых свойствами с и c2 для
        // упрощения демонстрации результата.
        Console.WriteLine("b.c: {0}", b.c);
        Console.WriteLine("b.c2: {0}", b.c2);
        // Вывод значений массива в консоль для демонстрации
        // результата.
        b.PrintArray();
    }
}