// Подключение классов стандартного модуля System.
using System;

// Определение класса А.
public class A
{
    // Определение конструктора по-умолчанию класса A, который
    public A()
    {
        a = 0;  // инициализирует нулем поле а
        b = 0;  // и инициализирует нулем поле b.
    }
    // Определение конструктора класса A, принимающего параметры
    // a и b типа float.
    public A(float a, float b)
    {
        this.a = a;  // Инициализация поля a значением параметра a.
        this.b = b;  // Инициализация поля b значением параметра b.
    }
    // Свойство c.
    public float c 
    {
        // Возвращает результат деления a на b
        // Выражение (операция деления) указана в задании
        // варианта лабораторной работы 1.
        get { return a / b; }
        // Отмимает получаемое значение value как от a, так
        // и от b. Выражение (операция отнимания) указана в
        // задании варианта лабораторной работы 1.
        set
        {
            a -= value;
            b -= value;
        }
    }
    // Объявление поля a. Поле объявлено с модификатором
    // protected, чтобы также быть доступным и классу B,
    // после наследования им класса A.
    protected float a;
    // Объявление поля b. Поле объявлено с модификатором
    // protected, чтобы также быть доступным и классу B,
    // после наследования им класса A.
    protected float b;
}

// Определение класса B, который является наследником
// класса A, что в свою очередь означает, что классу B
// будут доступны все поля, свойства и методы класса A
// имеющие модификаторы private и protected.
public class B : A
{
    // Определение конструктора класса B, который наследуется
    // от конструктора класса A (: base(a, b)).
    public B(float a, float b, bool d) : base(a, b)
    {
        this.d = d;  // Инизициализация поля d, значением из
                     // параметра d.
        // Инициализация массива. Размерность массива равна
        // значению поля а. Поскольку значение поля а имеет
        // вещественный тип (float), оно берется по модулю 
        // (при помощи функции Math.Abs(значение)) и явно
        // преобразуется (синтаксис: (uint)) в беззнаковое целое
        // число (тип uint).
        array = new float[(uint)Math.Abs(a)];
        // Цикл, инициализирующий элементы массива значением
        // возвращаемым свойстом с2 помноженным на значение
        // итератора i цикла (задание варианта лабораторной
        // работы 3).
        for (uint i = 0; i < array.Length; i++)
        {
            array[i] = c2 * i;
        }
    }
    // Определение индексатора для исходного массива (массива
    // под именем array).
    public float this[uint index] {
        get { return array[index]; }
        set { array[index] = value; }
    }
    // Определение индексатора для ного массива (массива
    // под именем array2).
    public int this[int index] {
        get { return array2[index]; }
        set { array2[index] = value; }
    }
    // Определение свойства c2
    public float c2
    {
        // которое возвращает результат выражения над полями a,
        // b и d.
        get {
            // В свойстве изпользуется управляющий оператор
            // (оператор условного ветвления if) определенный
            // заданием варианта лабораторной работы 2.
            if (d) { return a + b; }  // Если d равно true, то
                                      // возвращается сумма
                                      // полей a и b,
            else { return a - b; }  // иначе возвращается их
                                    // разность.
        }
    }
    // Определение метода возвращающего размерность массива array.
    public uint Length() {
        return (uint)array.Length;
    }
    // Определение метода возвращающего размерность массива array2.
    public int Length2() {
        return array2.Length;
    }
    // Объявление поля d. Тип поля выбран произвольно. Поле по
    // умолчанию имеет модификатор private, сигнализирующий,
    // что оно доступно только внутри класса.
    bool d;
    // Определение массива под именем array, который содержит
    // элементы типа float.
    float[] array;
    // Определение массива под именем array2, который содержит
    // элементы типа int и инициализируется значениями в фигурных
    // кавычках.
    int[] array2 = new int[5] {1, 2, 3, 4, 5};
}

// Определение параметризированного класса С
public class C<T> {
    public static int s = 10;  // со статическим полем
    T[] array = new T[5];  // и параметризацией (в данном случаем)
                           // типа элементов массива array.
}

// Создание класса Program
class Program
{
    // с одним методом (точкой входа) Main.
    static void Main()
    {
        // Создание объекта b класса B, который задействует
        // конструктор, внутри которого происходит инициализация
        // массива, а также полей a, b и d.
        B b = new B(-4.2f, 2.5f, true);
        // Вывод значений, возвращаемых свойствами с и c2 для
        // упрощения демонстрации результата.
        Console.WriteLine("b.c: {0}", b.c);
        Console.WriteLine("b.c2: {0}", b.c2);
        // Вывод на экран элементов массива array объекта b
        // класса B через индексатор. 
        Console.Write("Array: ");
        for (uint i = 0; i < b.Length(); i++)
        {
           Console.Write("{0} ", b[i]);
        }
        Console.WriteLine("");
        // Вывод на экран элементов массива array2 объекта b
        // класса B через индексатор. 
        Console.Write("Array2: ");
        for (int i = 0; i < b.Length2(); i++)
        {
           Console.Write("{0} ", b[i]);
        }
        Console.WriteLine("");
        // Демонстрация умения работать с параметризацией класа
        // (определение переменных c1 и c2 параметризированного
        // класса C<T>).
        C<string> c1 = new C<string>();
        C<int> c2 = new C<int>();
        // Демонстрация умения работать со статическим полем
        // (обращение к статическому полю s параметризированного
        // класса C<T> и вывод значения поля s в консоль). 
        Console.WriteLine("Значение статического члена: {0}", C<int>.s);
    }
}