// Подключение классов стандартного модуля System.
using System;

// Определение класса А.
public class A
{
    // Определение конструктора по-умолчанию класса A, который
    public A()
    {
        a = 0;  // инициализирует нулем поле а
        b = 0;  // и инициализирует нулем поле b.
    }
    // Определение конструктора класса A, принимающего параметры
    // a и b типа float.
    public A(float a, float b)
    {
        this.a = a;  // Инициализация поля a значением параметра a.
        this.b = b;  // Инициализация поля b значением параметра b.
    }
    // Свойство c.
    public float c 
    {
        // Возвращает результат деления a на b
        // Выражение (операция деления) указана в задании
        // варианта лабораторной работы 1.
        get { return a / b; }
        // Отнимает получаемое значение value как от a, так
        // и от b. Выражение (операция отнимания) указана в
        // задании варианта лабораторной работы 1.
        set {
            a -= value;
            b -= value;
        }
    }
    // Объявление поля a. Поле объявлено с модификатором
    // protected, чтобы также быть доступным и классу B,
    // после наследования им класса A.
    protected float a;
    // Объявление поля b. Поле объявлено с модификатором
    // protected, чтобы также быть доступным и классу B,
    // после наследования им класса A.
    protected float b;
}

// Определение класса B, который является наследником
// класса A, что в свою очередь означает, что классу B
// будут доступны все поля, свойства и методы класса A
// имеющие модификаторы private и protected.
public class B : A
{
    // Определение конструктора класса B, который наследуется
    // от конструктора класса A (: base(a, b)).
    public B(float a, float b, bool d) : base(a, b)
    {
        this.d = d;  // Инизициализация поля d, значением из
                     // параметра d.
    }
    // Собственный конструктор класса B, который
    public B(bool d)
    {
        a = 1;  // инициализирует поле a значением 1,
        b = 2;  // инициализирует поле b значением 2
        this.d = d;  // и инизиализирует поле d значением из
                     // параметра d.
    }
    // Определение свойства c2
    public float c2
    {
        // которое возвращает результат выражения над полями a,
        // b и d.
        get
        {
            // В свойстве изпользуется управляющий оператор
            // (оператор условного ветвления if) определенный
            // заданием варианта.
            if (d) { return a + b; }  // Если d равно true, то
                                      // возвращается сумма
                                      // полей a и b,
            else { return a - b; }  // иначе возвращается их
                                    // разность.
        }
    }
    // Определение поля d. Тип и значение поля выбраны
    // произвольно. Поле по умолчанию имеет модификатор private,
    // сигнализирующий, что оно доступно только внутри класса.
    bool d = true;
} 

// Создание класса Program
class Program
{
    // с одним методом (точкой входа) Main.
    static void Main()
    {
        // Создание объекта a класса А, который задействует
        // конструктор с параметрами.
        A a = new A(4, 2);
        // Вывод значения, возвращаемого свойством с для
        // демонстрации результата.
        Console.WriteLine("a.c: {0}", a.c);
        // Создание объекта b1 класса B, который задействует
        // собственный конструктор класса B.
        B b1 = new B(false);
        // Вывод значений, возвращаемых свойствами с и c2 для
        // демонстрации результата.
        Console.WriteLine("b1.c: {0}", b1.c);
        Console.WriteLine("b1.c2: {0}", b1.c2);
        // Создание объекта b2 класса B, который задействует
        // конструктор класса B, что наследуется от
        // конструктора класса А.
        B b2 = new B(4, 2, true);
        // Вывод значений, возвращаемых свойствами с и c2 для
        // демонстрации результата.
        Console.WriteLine("b2.c: {0}", b2.c);
        Console.WriteLine("b2.c2: {0}", b2.c2);
    }
}